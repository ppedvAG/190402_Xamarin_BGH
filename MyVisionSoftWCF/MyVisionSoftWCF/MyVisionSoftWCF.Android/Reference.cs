//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace MyVisionSoft.Logic.WebReference
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "ServiceSoap", Namespace = "http://tempuri.org/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;

        private System.Threading.SendOrPostCallback LoadSupportNewstickersOperationCompleted;

        private System.Threading.SendOrPostCallback SupportRequestsAreOpenOperationCompleted;

        private System.Threading.SendOrPostCallback LoadSupportRequestFileOperationCompleted;

        private System.Threading.SendOrPostCallback AddFileOperationCompleted;

        private System.Threading.SendOrPostCallback SaveSupportRequestOperationCompleted;

        private System.Threading.SendOrPostCallback LoadSupportRequestOperationCompleted;

        private System.Threading.SendOrPostCallback LoadMyFAQsOperationCompleted;

        private System.Threading.SendOrPostCallback LoadFAQOperationCompleted;

        private System.Threading.SendOrPostCallback SaveFAQOperationCompleted;

        private System.Threading.SendOrPostCallback LoadMySupportRequestsOperationCompleted;

        private System.Threading.SendOrPostCallback LoadCoreTeamSupportRequestsOperationCompleted;

        private System.Threading.SendOrPostCallback LoadControllingSupportRequestsOperationCompleted;

        private System.Threading.SendOrPostCallback GetVersionofAppServerOperationCompleted;

        private System.Threading.SendOrPostCallback LoadAvailableDownloadsOperationCompleted;

        private System.Threading.SendOrPostCallback GetVersionofDeviceHunterOperationCompleted;

        private System.Threading.SendOrPostCallback GetVersionofERPImportOperationCompleted;

        private System.Threading.SendOrPostCallback GetVersionofFileContentImportOperationCompleted;

        private System.Threading.SendOrPostCallback GetVersionofFileImportOperationCompleted;

        private System.Threading.SendOrPostCallback GetVersionofFullindexingOperationCompleted;

        private System.Threading.SendOrPostCallback GetVersionofScanningOperationCompleted;

        private System.Threading.SendOrPostCallback GetVersionofMessageOperationCompleted;

        private System.Threading.SendOrPostCallback GetVersionofTRanslatorOperationCompleted;

        private System.Threading.SendOrPostCallback GetVersionofLDAPConnectorOperationCompleted;

        private System.Threading.SendOrPostCallback GetVersionofUpdaterOperationCompleted;

        private System.Threading.SendOrPostCallback GetVersionofClientOperationCompleted;

        private System.Threading.SendOrPostCallback LoadTestFileOperationCompleted;

        private System.Threading.SendOrPostCallback LoadFileListOperationCompleted;

        private System.Threading.SendOrPostCallback LoadFileOperationCompleted;

        private System.Threading.SendOrPostCallback LoadCompressedFileOperationCompleted;

        private System.Threading.SendOrPostCallback GetGlobalTranslationsOperationCompleted;

        private System.Threading.SendOrPostCallback DownloadSPRFileOperationCompleted;

        private System.Threading.SendOrPostCallback DownloadSPRDocOperationCompleted;

        private System.Threading.SendOrPostCallback DownloadChangedSPRsOperationCompleted;

        private System.Threading.SendOrPostCallback UploadSPRDocOperationCompleted;

        private System.Threading.SendOrPostCallback UploadSPRFileOperationCompleted;

        private System.Threading.SendOrPostCallback UploadSPRConfirmOperationCompleted;

        private System.Threading.SendOrPostCallback DownloadSPRConfirmOperationCompleted;

        private System.Threading.SendOrPostCallback TestFileListOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public Service()
        {
            this.Url = global::MyVisionSoft.Logic.Properties.Settings.Default.MyVisionSoft_Logic_WebReference_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;

        /// <remarks/>
        public event LoadSupportNewstickersCompletedEventHandler LoadSupportNewstickersCompleted;

        /// <remarks/>
        public event SupportRequestsAreOpenCompletedEventHandler SupportRequestsAreOpenCompleted;

        /// <remarks/>
        public event LoadSupportRequestFileCompletedEventHandler LoadSupportRequestFileCompleted;

        /// <remarks/>
        public event AddFileCompletedEventHandler AddFileCompleted;

        /// <remarks/>
        public event SaveSupportRequestCompletedEventHandler SaveSupportRequestCompleted;

        /// <remarks/>
        public event LoadSupportRequestCompletedEventHandler LoadSupportRequestCompleted;

        /// <remarks/>
        public event LoadMyFAQsCompletedEventHandler LoadMyFAQsCompleted;

        /// <remarks/>
        public event LoadFAQCompletedEventHandler LoadFAQCompleted;

        /// <remarks/>
        public event SaveFAQCompletedEventHandler SaveFAQCompleted;

        /// <remarks/>
        public event LoadMySupportRequestsCompletedEventHandler LoadMySupportRequestsCompleted;

        /// <remarks/>
        public event LoadCoreTeamSupportRequestsCompletedEventHandler LoadCoreTeamSupportRequestsCompleted;

        /// <remarks/>
        public event LoadControllingSupportRequestsCompletedEventHandler LoadControllingSupportRequestsCompleted;

        /// <remarks/>
        public event GetVersionofAppServerCompletedEventHandler GetVersionofAppServerCompleted;

        /// <remarks/>
        public event LoadAvailableDownloadsCompletedEventHandler LoadAvailableDownloadsCompleted;

        /// <remarks/>
        public event GetVersionofDeviceHunterCompletedEventHandler GetVersionofDeviceHunterCompleted;

        /// <remarks/>
        public event GetVersionofERPImportCompletedEventHandler GetVersionofERPImportCompleted;

        /// <remarks/>
        public event GetVersionofFileContentImportCompletedEventHandler GetVersionofFileContentImportCompleted;

        /// <remarks/>
        public event GetVersionofFileImportCompletedEventHandler GetVersionofFileImportCompleted;

        /// <remarks/>
        public event GetVersionofFullindexingCompletedEventHandler GetVersionofFullindexingCompleted;

        /// <remarks/>
        public event GetVersionofScanningCompletedEventHandler GetVersionofScanningCompleted;

        /// <remarks/>
        public event GetVersionofMessageCompletedEventHandler GetVersionofMessageCompleted;

        /// <remarks/>
        public event GetVersionofTRanslatorCompletedEventHandler GetVersionofTRanslatorCompleted;

        /// <remarks/>
        public event GetVersionofLDAPConnectorCompletedEventHandler GetVersionofLDAPConnectorCompleted;

        /// <remarks/>
        public event GetVersionofUpdaterCompletedEventHandler GetVersionofUpdaterCompleted;

        /// <remarks/>
        public event GetVersionofClientCompletedEventHandler GetVersionofClientCompleted;

        /// <remarks/>
        public event LoadTestFileCompletedEventHandler LoadTestFileCompleted;

        /// <remarks/>
        public event LoadFileListCompletedEventHandler LoadFileListCompleted;

        /// <remarks/>
        public event LoadFileCompletedEventHandler LoadFileCompleted;

        /// <remarks/>
        public event LoadCompressedFileCompletedEventHandler LoadCompressedFileCompleted;

        /// <remarks/>
        public event GetGlobalTranslationsCompletedEventHandler GetGlobalTranslationsCompleted;

        /// <remarks/>
        public event DownloadSPRFileCompletedEventHandler DownloadSPRFileCompleted;

        /// <remarks/>
        public event DownloadSPRDocCompletedEventHandler DownloadSPRDocCompleted;

        /// <remarks/>
        public event DownloadChangedSPRsCompletedEventHandler DownloadChangedSPRsCompleted;

        /// <remarks/>
        public event UploadSPRDocCompletedEventHandler UploadSPRDocCompleted;

        /// <remarks/>
        public event UploadSPRFileCompletedEventHandler UploadSPRFileCompleted;

        /// <remarks/>
        public event UploadSPRConfirmCompletedEventHandler UploadSPRConfirmCompleted;

        /// <remarks/>
        public event DownloadSPRConfirmCompletedEventHandler DownloadSPRConfirmCompleted;

        /// <remarks/>
        public event TestFileListCompletedEventHandler TestFileListCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld(string commguid)
        {
            object[] results = this.Invoke("HelloWorld", new object[] {
                        commguid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void HelloWorldAsync(string commguid)
        {
            this.HelloWorldAsync(commguid, null);
        }

        /// <remarks/>
        public void HelloWorldAsync(string commguid, object userState)
        {
            if ((this.HelloWorldOperationCompleted == null))
            {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[] {
                        commguid}, this.HelloWorldOperationCompleted, userState);
        }

        private void OnHelloWorldOperationCompleted(object arg)
        {
            if ((this.HelloWorldCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadSupportNewstickers", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadSupportNewstickers(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs)
        {
            object[] results = this.Invoke("LoadSupportNewstickers", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs});
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void LoadSupportNewstickersAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs)
        {
            this.LoadSupportNewstickersAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, null);
        }

        /// <remarks/>
        public void LoadSupportNewstickersAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, object userState)
        {
            if ((this.LoadSupportNewstickersOperationCompleted == null))
            {
                this.LoadSupportNewstickersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadSupportNewstickersOperationCompleted);
            }
            this.InvokeAsync("LoadSupportNewstickers", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs}, this.LoadSupportNewstickersOperationCompleted, userState);
        }

        private void OnLoadSupportNewstickersOperationCompleted(object arg)
        {
            if ((this.LoadSupportNewstickersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadSupportNewstickersCompleted(this, new LoadSupportNewstickersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SupportRequestsAreOpen", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SupportRequestsAreOpen(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strGroup)
        {
            object[] results = this.Invoke("SupportRequestsAreOpen", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strGroup});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void SupportRequestsAreOpenAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strGroup)
        {
            this.SupportRequestsAreOpenAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strGroup, null);
        }

        /// <remarks/>
        public void SupportRequestsAreOpenAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strGroup, object userState)
        {
            if ((this.SupportRequestsAreOpenOperationCompleted == null))
            {
                this.SupportRequestsAreOpenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSupportRequestsAreOpenOperationCompleted);
            }
            this.InvokeAsync("SupportRequestsAreOpen", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strGroup}, this.SupportRequestsAreOpenOperationCompleted, userState);
        }

        private void OnSupportRequestsAreOpenOperationCompleted(object arg)
        {
            if ((this.SupportRequestsAreOpenCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SupportRequestsAreOpenCompleted(this, new SupportRequestsAreOpenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadSupportRequestFile", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] LoadSupportRequestFile(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strFileID)
        {
            object[] results = this.Invoke("LoadSupportRequestFile", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strFileID});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void LoadSupportRequestFileAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strFileID)
        {
            this.LoadSupportRequestFileAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strFileID, null);
        }

        /// <remarks/>
        public void LoadSupportRequestFileAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strFileID, object userState)
        {
            if ((this.LoadSupportRequestFileOperationCompleted == null))
            {
                this.LoadSupportRequestFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadSupportRequestFileOperationCompleted);
            }
            this.InvokeAsync("LoadSupportRequestFile", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strFileID}, this.LoadSupportRequestFileOperationCompleted, userState);
        }

        private void OnLoadSupportRequestFileOperationCompleted(object arg)
        {
            if ((this.LoadSupportRequestFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadSupportRequestFileCompleted(this, new LoadSupportRequestFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddFile", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddFile(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID, string strOriginalname, string strOriginalExtension, int intSize, [System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] bytFile)
        {
            object[] results = this.Invoke("AddFile", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strDocID,
                        strOriginalname,
                        strOriginalExtension,
                        intSize,
                        bytFile});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AddFileAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID, string strOriginalname, string strOriginalExtension, int intSize, byte[] bytFile)
        {
            this.AddFileAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strDocID, strOriginalname, strOriginalExtension, intSize, bytFile, null);
        }

        /// <remarks/>
        public void AddFileAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID, string strOriginalname, string strOriginalExtension, int intSize, byte[] bytFile, object userState)
        {
            if ((this.AddFileOperationCompleted == null))
            {
                this.AddFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFileOperationCompleted);
            }
            this.InvokeAsync("AddFile", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strDocID,
                        strOriginalname,
                        strOriginalExtension,
                        intSize,
                        bytFile}, this.AddFileOperationCompleted, userState);
        }

        private void OnAddFileOperationCompleted(object arg)
        {
            if ((this.AddFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFileCompleted(this, new AddFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveSupportRequest", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveSupportRequest(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID, System.Data.DataSet DS)
        {
            object[] results = this.Invoke("SaveSupportRequest", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strDocID,
                        DS});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void SaveSupportRequestAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID, System.Data.DataSet DS)
        {
            this.SaveSupportRequestAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strDocID, DS, null);
        }

        /// <remarks/>
        public void SaveSupportRequestAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID, System.Data.DataSet DS, object userState)
        {
            if ((this.SaveSupportRequestOperationCompleted == null))
            {
                this.SaveSupportRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveSupportRequestOperationCompleted);
            }
            this.InvokeAsync("SaveSupportRequest", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strDocID,
                        DS}, this.SaveSupportRequestOperationCompleted, userState);
        }

        private void OnSaveSupportRequestOperationCompleted(object arg)
        {
            if ((this.SaveSupportRequestCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveSupportRequestCompleted(this, new SaveSupportRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadSupportRequest", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadSupportRequest(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID)
        {
            object[] results = this.Invoke("LoadSupportRequest", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strDocID});
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void LoadSupportRequestAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID)
        {
            this.LoadSupportRequestAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strDocID, null);
        }

        /// <remarks/>
        public void LoadSupportRequestAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID, object userState)
        {
            if ((this.LoadSupportRequestOperationCompleted == null))
            {
                this.LoadSupportRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadSupportRequestOperationCompleted);
            }
            this.InvokeAsync("LoadSupportRequest", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strDocID}, this.LoadSupportRequestOperationCompleted, userState);
        }

        private void OnLoadSupportRequestOperationCompleted(object arg)
        {
            if ((this.LoadSupportRequestCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadSupportRequestCompleted(this, new LoadSupportRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadMyFAQs", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadMyFAQs(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs)
        {
            object[] results = this.Invoke("LoadMyFAQs", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs});
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void LoadMyFAQsAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs)
        {
            this.LoadMyFAQsAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, null);
        }

        /// <remarks/>
        public void LoadMyFAQsAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, object userState)
        {
            if ((this.LoadMyFAQsOperationCompleted == null))
            {
                this.LoadMyFAQsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadMyFAQsOperationCompleted);
            }
            this.InvokeAsync("LoadMyFAQs", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs}, this.LoadMyFAQsOperationCompleted, userState);
        }

        private void OnLoadMyFAQsOperationCompleted(object arg)
        {
            if ((this.LoadMyFAQsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadMyFAQsCompleted(this, new LoadMyFAQsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadFAQ", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadFAQ(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID)
        {
            object[] results = this.Invoke("LoadFAQ", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strDocID});
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void LoadFAQAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID)
        {
            this.LoadFAQAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strDocID, null);
        }

        /// <remarks/>
        public void LoadFAQAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID, object userState)
        {
            if ((this.LoadFAQOperationCompleted == null))
            {
                this.LoadFAQOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadFAQOperationCompleted);
            }
            this.InvokeAsync("LoadFAQ", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strDocID}, this.LoadFAQOperationCompleted, userState);
        }

        private void OnLoadFAQOperationCompleted(object arg)
        {
            if ((this.LoadFAQCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadFAQCompleted(this, new LoadFAQCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveFAQ", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveFAQ(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID, System.Data.DataSet DS)
        {
            object[] results = this.Invoke("SaveFAQ", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strDocID,
                        DS});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void SaveFAQAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID, System.Data.DataSet DS)
        {
            this.SaveFAQAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strDocID, DS, null);
        }

        /// <remarks/>
        public void SaveFAQAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID, System.Data.DataSet DS, object userState)
        {
            if ((this.SaveFAQOperationCompleted == null))
            {
                this.SaveFAQOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFAQOperationCompleted);
            }
            this.InvokeAsync("SaveFAQ", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strDocID,
                        DS}, this.SaveFAQOperationCompleted, userState);
        }

        private void OnSaveFAQOperationCompleted(object arg)
        {
            if ((this.SaveFAQCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFAQCompleted(this, new SaveFAQCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadMySupportRequests", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadMySupportRequests(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strUsername)
        {
            object[] results = this.Invoke("LoadMySupportRequests", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strUsername});
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void LoadMySupportRequestsAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strUsername)
        {
            this.LoadMySupportRequestsAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strUsername, null);
        }

        /// <remarks/>
        public void LoadMySupportRequestsAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strUsername, object userState)
        {
            if ((this.LoadMySupportRequestsOperationCompleted == null))
            {
                this.LoadMySupportRequestsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadMySupportRequestsOperationCompleted);
            }
            this.InvokeAsync("LoadMySupportRequests", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strUsername}, this.LoadMySupportRequestsOperationCompleted, userState);
        }

        private void OnLoadMySupportRequestsOperationCompleted(object arg)
        {
            if ((this.LoadMySupportRequestsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadMySupportRequestsCompleted(this, new LoadMySupportRequestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadCoreTeamSupportRequests", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadCoreTeamSupportRequests(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs)
        {
            object[] results = this.Invoke("LoadCoreTeamSupportRequests", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs});
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void LoadCoreTeamSupportRequestsAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs)
        {
            this.LoadCoreTeamSupportRequestsAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, null);
        }

        /// <remarks/>
        public void LoadCoreTeamSupportRequestsAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, object userState)
        {
            if ((this.LoadCoreTeamSupportRequestsOperationCompleted == null))
            {
                this.LoadCoreTeamSupportRequestsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadCoreTeamSupportRequestsOperationCompleted);
            }
            this.InvokeAsync("LoadCoreTeamSupportRequests", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs}, this.LoadCoreTeamSupportRequestsOperationCompleted, userState);
        }

        private void OnLoadCoreTeamSupportRequestsOperationCompleted(object arg)
        {
            if ((this.LoadCoreTeamSupportRequestsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadCoreTeamSupportRequestsCompleted(this, new LoadCoreTeamSupportRequestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadControllingSupportRequests", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadControllingSupportRequests(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs)
        {
            object[] results = this.Invoke("LoadControllingSupportRequests", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs});
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void LoadControllingSupportRequestsAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs)
        {
            this.LoadControllingSupportRequestsAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, null);
        }

        /// <remarks/>
        public void LoadControllingSupportRequestsAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, object userState)
        {
            if ((this.LoadControllingSupportRequestsOperationCompleted == null))
            {
                this.LoadControllingSupportRequestsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadControllingSupportRequestsOperationCompleted);
            }
            this.InvokeAsync("LoadControllingSupportRequests", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs}, this.LoadControllingSupportRequestsOperationCompleted, userState);
        }

        private void OnLoadControllingSupportRequestsOperationCompleted(object arg)
        {
            if ((this.LoadControllingSupportRequestsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadControllingSupportRequestsCompleted(this, new LoadControllingSupportRequestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVersionofAppServer", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersionofAppServer(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            object[] results = this.Invoke("GetVersionofAppServer", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetVersionofAppServerAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            this.GetVersionofAppServerAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSystem, null);
        }

        /// <remarks/>
        public void GetVersionofAppServerAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem, object userState)
        {
            if ((this.GetVersionofAppServerOperationCompleted == null))
            {
                this.GetVersionofAppServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionofAppServerOperationCompleted);
            }
            this.InvokeAsync("GetVersionofAppServer", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem}, this.GetVersionofAppServerOperationCompleted, userState);
        }

        private void OnGetVersionofAppServerOperationCompleted(object arg)
        {
            if ((this.GetVersionofAppServerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionofAppServerCompleted(this, new GetVersionofAppServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadAvailableDownloads", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadAvailableDownloads(string commguid, string strType)
        {
            object[] results = this.Invoke("LoadAvailableDownloads", new object[] {
                        commguid,
                        strType});
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void LoadAvailableDownloadsAsync(string commguid, string strType)
        {
            this.LoadAvailableDownloadsAsync(commguid, strType, null);
        }

        /// <remarks/>
        public void LoadAvailableDownloadsAsync(string commguid, string strType, object userState)
        {
            if ((this.LoadAvailableDownloadsOperationCompleted == null))
            {
                this.LoadAvailableDownloadsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadAvailableDownloadsOperationCompleted);
            }
            this.InvokeAsync("LoadAvailableDownloads", new object[] {
                        commguid,
                        strType}, this.LoadAvailableDownloadsOperationCompleted, userState);
        }

        private void OnLoadAvailableDownloadsOperationCompleted(object arg)
        {
            if ((this.LoadAvailableDownloadsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadAvailableDownloadsCompleted(this, new LoadAvailableDownloadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVersionofDeviceHunter", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersionofDeviceHunter(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            object[] results = this.Invoke("GetVersionofDeviceHunter", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetVersionofDeviceHunterAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            this.GetVersionofDeviceHunterAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSystem, null);
        }

        /// <remarks/>
        public void GetVersionofDeviceHunterAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem, object userState)
        {
            if ((this.GetVersionofDeviceHunterOperationCompleted == null))
            {
                this.GetVersionofDeviceHunterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionofDeviceHunterOperationCompleted);
            }
            this.InvokeAsync("GetVersionofDeviceHunter", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem}, this.GetVersionofDeviceHunterOperationCompleted, userState);
        }

        private void OnGetVersionofDeviceHunterOperationCompleted(object arg)
        {
            if ((this.GetVersionofDeviceHunterCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionofDeviceHunterCompleted(this, new GetVersionofDeviceHunterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVersionofERPImport", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersionofERPImport(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            object[] results = this.Invoke("GetVersionofERPImport", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetVersionofERPImportAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            this.GetVersionofERPImportAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSystem, null);
        }

        /// <remarks/>
        public void GetVersionofERPImportAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem, object userState)
        {
            if ((this.GetVersionofERPImportOperationCompleted == null))
            {
                this.GetVersionofERPImportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionofERPImportOperationCompleted);
            }
            this.InvokeAsync("GetVersionofERPImport", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem}, this.GetVersionofERPImportOperationCompleted, userState);
        }

        private void OnGetVersionofERPImportOperationCompleted(object arg)
        {
            if ((this.GetVersionofERPImportCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionofERPImportCompleted(this, new GetVersionofERPImportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVersionofFileContentImport", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersionofFileContentImport(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            object[] results = this.Invoke("GetVersionofFileContentImport", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetVersionofFileContentImportAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            this.GetVersionofFileContentImportAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSystem, null);
        }

        /// <remarks/>
        public void GetVersionofFileContentImportAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem, object userState)
        {
            if ((this.GetVersionofFileContentImportOperationCompleted == null))
            {
                this.GetVersionofFileContentImportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionofFileContentImportOperationCompleted);
            }
            this.InvokeAsync("GetVersionofFileContentImport", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem}, this.GetVersionofFileContentImportOperationCompleted, userState);
        }

        private void OnGetVersionofFileContentImportOperationCompleted(object arg)
        {
            if ((this.GetVersionofFileContentImportCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionofFileContentImportCompleted(this, new GetVersionofFileContentImportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVersionofFileImport", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersionofFileImport(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            object[] results = this.Invoke("GetVersionofFileImport", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetVersionofFileImportAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            this.GetVersionofFileImportAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSystem, null);
        }

        /// <remarks/>
        public void GetVersionofFileImportAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem, object userState)
        {
            if ((this.GetVersionofFileImportOperationCompleted == null))
            {
                this.GetVersionofFileImportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionofFileImportOperationCompleted);
            }
            this.InvokeAsync("GetVersionofFileImport", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem}, this.GetVersionofFileImportOperationCompleted, userState);
        }

        private void OnGetVersionofFileImportOperationCompleted(object arg)
        {
            if ((this.GetVersionofFileImportCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionofFileImportCompleted(this, new GetVersionofFileImportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVersionofFullindexing", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersionofFullindexing(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            object[] results = this.Invoke("GetVersionofFullindexing", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetVersionofFullindexingAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            this.GetVersionofFullindexingAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSystem, null);
        }

        /// <remarks/>
        public void GetVersionofFullindexingAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem, object userState)
        {
            if ((this.GetVersionofFullindexingOperationCompleted == null))
            {
                this.GetVersionofFullindexingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionofFullindexingOperationCompleted);
            }
            this.InvokeAsync("GetVersionofFullindexing", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem}, this.GetVersionofFullindexingOperationCompleted, userState);
        }

        private void OnGetVersionofFullindexingOperationCompleted(object arg)
        {
            if ((this.GetVersionofFullindexingCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionofFullindexingCompleted(this, new GetVersionofFullindexingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVersionofScanning", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersionofScanning(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            object[] results = this.Invoke("GetVersionofScanning", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetVersionofScanningAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            this.GetVersionofScanningAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSystem, null);
        }

        /// <remarks/>
        public void GetVersionofScanningAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem, object userState)
        {
            if ((this.GetVersionofScanningOperationCompleted == null))
            {
                this.GetVersionofScanningOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionofScanningOperationCompleted);
            }
            this.InvokeAsync("GetVersionofScanning", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem}, this.GetVersionofScanningOperationCompleted, userState);
        }

        private void OnGetVersionofScanningOperationCompleted(object arg)
        {
            if ((this.GetVersionofScanningCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionofScanningCompleted(this, new GetVersionofScanningCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVersionofMessage", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersionofMessage(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            object[] results = this.Invoke("GetVersionofMessage", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetVersionofMessageAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            this.GetVersionofMessageAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSystem, null);
        }

        /// <remarks/>
        public void GetVersionofMessageAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem, object userState)
        {
            if ((this.GetVersionofMessageOperationCompleted == null))
            {
                this.GetVersionofMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionofMessageOperationCompleted);
            }
            this.InvokeAsync("GetVersionofMessage", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem}, this.GetVersionofMessageOperationCompleted, userState);
        }

        private void OnGetVersionofMessageOperationCompleted(object arg)
        {
            if ((this.GetVersionofMessageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionofMessageCompleted(this, new GetVersionofMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVersionofTRanslator", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersionofTRanslator(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            object[] results = this.Invoke("GetVersionofTRanslator", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetVersionofTRanslatorAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            this.GetVersionofTRanslatorAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSystem, null);
        }

        /// <remarks/>
        public void GetVersionofTRanslatorAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem, object userState)
        {
            if ((this.GetVersionofTRanslatorOperationCompleted == null))
            {
                this.GetVersionofTRanslatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionofTRanslatorOperationCompleted);
            }
            this.InvokeAsync("GetVersionofTRanslator", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem}, this.GetVersionofTRanslatorOperationCompleted, userState);
        }

        private void OnGetVersionofTRanslatorOperationCompleted(object arg)
        {
            if ((this.GetVersionofTRanslatorCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionofTRanslatorCompleted(this, new GetVersionofTRanslatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVersionofLDAPConnector", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersionofLDAPConnector(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            object[] results = this.Invoke("GetVersionofLDAPConnector", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetVersionofLDAPConnectorAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            this.GetVersionofLDAPConnectorAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSystem, null);
        }

        /// <remarks/>
        public void GetVersionofLDAPConnectorAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem, object userState)
        {
            if ((this.GetVersionofLDAPConnectorOperationCompleted == null))
            {
                this.GetVersionofLDAPConnectorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionofLDAPConnectorOperationCompleted);
            }
            this.InvokeAsync("GetVersionofLDAPConnector", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem}, this.GetVersionofLDAPConnectorOperationCompleted, userState);
        }

        private void OnGetVersionofLDAPConnectorOperationCompleted(object arg)
        {
            if ((this.GetVersionofLDAPConnectorCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionofLDAPConnectorCompleted(this, new GetVersionofLDAPConnectorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVersionofUpdater", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersionofUpdater(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            object[] results = this.Invoke("GetVersionofUpdater", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetVersionofUpdaterAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            this.GetVersionofUpdaterAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSystem, null);
        }

        /// <remarks/>
        public void GetVersionofUpdaterAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem, object userState)
        {
            if ((this.GetVersionofUpdaterOperationCompleted == null))
            {
                this.GetVersionofUpdaterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionofUpdaterOperationCompleted);
            }
            this.InvokeAsync("GetVersionofUpdater", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem}, this.GetVersionofUpdaterOperationCompleted, userState);
        }

        private void OnGetVersionofUpdaterOperationCompleted(object arg)
        {
            if ((this.GetVersionofUpdaterCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionofUpdaterCompleted(this, new GetVersionofUpdaterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVersionofClient", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersionofClient(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            object[] results = this.Invoke("GetVersionofClient", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetVersionofClientAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            this.GetVersionofClientAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSystem, null);
        }

        /// <remarks/>
        public void GetVersionofClientAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem, object userState)
        {
            if ((this.GetVersionofClientOperationCompleted == null))
            {
                this.GetVersionofClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionofClientOperationCompleted);
            }
            this.InvokeAsync("GetVersionofClient", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem}, this.GetVersionofClientOperationCompleted, userState);
        }

        private void OnGetVersionofClientOperationCompleted(object arg)
        {
            if ((this.GetVersionofClientCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionofClientCompleted(this, new GetVersionofClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadTestFile", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] LoadTestFile(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            object[] results = this.Invoke("LoadTestFile", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void LoadTestFileAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            this.LoadTestFileAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSystem, null);
        }

        /// <remarks/>
        public void LoadTestFileAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem, object userState)
        {
            if ((this.LoadTestFileOperationCompleted == null))
            {
                this.LoadTestFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadTestFileOperationCompleted);
            }
            this.InvokeAsync("LoadTestFile", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem}, this.LoadTestFileOperationCompleted, userState);
        }

        private void OnLoadTestFileOperationCompleted(object arg)
        {
            if ((this.LoadTestFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadTestFileCompleted(this, new LoadTestFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadFileList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LoadFileList(string commguid, string strType, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            object[] results = this.Invoke("LoadFileList", new object[] {
                        commguid,
                        strType,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem});
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void LoadFileListAsync(string commguid, string strType, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            this.LoadFileListAsync(commguid, strType, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSystem, null);
        }

        /// <remarks/>
        public void LoadFileListAsync(string commguid, string strType, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem, object userState)
        {
            if ((this.LoadFileListOperationCompleted == null))
            {
                this.LoadFileListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadFileListOperationCompleted);
            }
            this.InvokeAsync("LoadFileList", new object[] {
                        commguid,
                        strType,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem}, this.LoadFileListOperationCompleted, userState);
        }

        private void OnLoadFileListOperationCompleted(object arg)
        {
            if ((this.LoadFileListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadFileListCompleted(this, new LoadFileListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadFile", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] LoadFile(string commguid, string strType, string strFileName, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            object[] results = this.Invoke("LoadFile", new object[] {
                        commguid,
                        strType,
                        strFileName,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void LoadFileAsync(string commguid, string strType, string strFileName, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            this.LoadFileAsync(commguid, strType, strFileName, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSystem, null);
        }

        /// <remarks/>
        public void LoadFileAsync(string commguid, string strType, string strFileName, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem, object userState)
        {
            if ((this.LoadFileOperationCompleted == null))
            {
                this.LoadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadFileOperationCompleted);
            }
            this.InvokeAsync("LoadFile", new object[] {
                        commguid,
                        strType,
                        strFileName,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem}, this.LoadFileOperationCompleted, userState);
        }

        private void OnLoadFileOperationCompleted(object arg)
        {
            if ((this.LoadFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadFileCompleted(this, new LoadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadCompressedFile", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] LoadCompressedFile(string commguid, string strType, string strFileName, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            object[] results = this.Invoke("LoadCompressedFile", new object[] {
                        commguid,
                        strType,
                        strFileName,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void LoadCompressedFileAsync(string commguid, string strType, string strFileName, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem)
        {
            this.LoadCompressedFileAsync(commguid, strType, strFileName, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSystem, null);
        }

        /// <remarks/>
        public void LoadCompressedFileAsync(string commguid, string strType, string strFileName, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSystem, object userState)
        {
            if ((this.LoadCompressedFileOperationCompleted == null))
            {
                this.LoadCompressedFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadCompressedFileOperationCompleted);
            }
            this.InvokeAsync("LoadCompressedFile", new object[] {
                        commguid,
                        strType,
                        strFileName,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSystem}, this.LoadCompressedFileOperationCompleted, userState);
        }

        private void OnLoadCompressedFileOperationCompleted(object arg)
        {
            if ((this.LoadCompressedFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadCompressedFileCompleted(this, new LoadCompressedFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGlobalTranslations", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetGlobalTranslations(string commguid, System.DateTime dtLastCall)
        {
            object[] results = this.Invoke("GetGlobalTranslations", new object[] {
                        commguid,
                        dtLastCall});
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void GetGlobalTranslationsAsync(string commguid, System.DateTime dtLastCall)
        {
            this.GetGlobalTranslationsAsync(commguid, dtLastCall, null);
        }

        /// <remarks/>
        public void GetGlobalTranslationsAsync(string commguid, System.DateTime dtLastCall, object userState)
        {
            if ((this.GetGlobalTranslationsOperationCompleted == null))
            {
                this.GetGlobalTranslationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGlobalTranslationsOperationCompleted);
            }
            this.InvokeAsync("GetGlobalTranslations", new object[] {
                        commguid,
                        dtLastCall}, this.GetGlobalTranslationsOperationCompleted, userState);
        }

        private void OnGetGlobalTranslationsOperationCompleted(object arg)
        {
            if ((this.GetGlobalTranslationsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGlobalTranslationsCompleted(this, new GetGlobalTranslationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadSPRFile", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] DownloadSPRFile(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strFilID)
        {
            object[] results = this.Invoke("DownloadSPRFile", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strFilID});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void DownloadSPRFileAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strFilID)
        {
            this.DownloadSPRFileAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strFilID, null);
        }

        /// <remarks/>
        public void DownloadSPRFileAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strFilID, object userState)
        {
            if ((this.DownloadSPRFileOperationCompleted == null))
            {
                this.DownloadSPRFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadSPRFileOperationCompleted);
            }
            this.InvokeAsync("DownloadSPRFile", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strFilID}, this.DownloadSPRFileOperationCompleted, userState);
        }

        private void OnDownloadSPRFileOperationCompleted(object arg)
        {
            if ((this.DownloadSPRFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadSPRFileCompleted(this, new DownloadSPRFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadSPRDoc", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DownloadSPRDoc(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID)
        {
            object[] results = this.Invoke("DownloadSPRDoc", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strDocID});
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void DownloadSPRDocAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID)
        {
            this.DownloadSPRDocAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strDocID, null);
        }

        /// <remarks/>
        public void DownloadSPRDocAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID, object userState)
        {
            if ((this.DownloadSPRDocOperationCompleted == null))
            {
                this.DownloadSPRDocOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadSPRDocOperationCompleted);
            }
            this.InvokeAsync("DownloadSPRDoc", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strDocID}, this.DownloadSPRDocOperationCompleted, userState);
        }

        private void OnDownloadSPRDocOperationCompleted(object arg)
        {
            if ((this.DownloadSPRDocCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadSPRDocCompleted(this, new DownloadSPRDocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadChangedSPRs", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] DownloadChangedSPRs(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs)
        {
            object[] results = this.Invoke("DownloadChangedSPRs", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DownloadChangedSPRsAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs)
        {
            this.DownloadChangedSPRsAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, null);
        }

        /// <remarks/>
        public void DownloadChangedSPRsAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, object userState)
        {
            if ((this.DownloadChangedSPRsOperationCompleted == null))
            {
                this.DownloadChangedSPRsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadChangedSPRsOperationCompleted);
            }
            this.InvokeAsync("DownloadChangedSPRs", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs}, this.DownloadChangedSPRsOperationCompleted, userState);
        }

        private void OnDownloadChangedSPRsOperationCompleted(object arg)
        {
            if ((this.DownloadChangedSPRsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadChangedSPRsCompleted(this, new DownloadChangedSPRsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadSPRDoc", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadSPRDoc(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID, System.Data.DataSet DS)
        {
            object[] results = this.Invoke("UploadSPRDoc", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strDocID,
                        DS});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void UploadSPRDocAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID, System.Data.DataSet DS)
        {
            this.UploadSPRDocAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strDocID, DS, null);
        }

        /// <remarks/>
        public void UploadSPRDocAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strDocID, System.Data.DataSet DS, object userState)
        {
            if ((this.UploadSPRDocOperationCompleted == null))
            {
                this.UploadSPRDocOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadSPRDocOperationCompleted);
            }
            this.InvokeAsync("UploadSPRDoc", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strDocID,
                        DS}, this.UploadSPRDocOperationCompleted, userState);
        }

        private void OnUploadSPRDocOperationCompleted(object arg)
        {
            if ((this.UploadSPRDocCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadSPRDocCompleted(this, new UploadSPRDocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadSPRFile", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadSPRFile(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strfileID, [System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] bytFile)
        {
            object[] results = this.Invoke("UploadSPRFile", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strfileID,
                        bytFile});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void UploadSPRFileAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strfileID, byte[] bytFile)
        {
            this.UploadSPRFileAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strfileID, bytFile, null);
        }

        /// <remarks/>
        public void UploadSPRFileAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strfileID, byte[] bytFile, object userState)
        {
            if ((this.UploadSPRFileOperationCompleted == null))
            {
                this.UploadSPRFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadSPRFileOperationCompleted);
            }
            this.InvokeAsync("UploadSPRFile", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strfileID,
                        bytFile}, this.UploadSPRFileOperationCompleted, userState);
        }

        private void OnUploadSPRFileOperationCompleted(object arg)
        {
            if ((this.UploadSPRFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadSPRFileCompleted(this, new UploadSPRFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadSPRConfirm", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadSPRConfirm(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSPRID, string strSPSID, System.DateTime dtDate)
        {
            object[] results = this.Invoke("UploadSPRConfirm", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSPRID,
                        strSPSID,
                        dtDate});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void UploadSPRConfirmAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSPRID, string strSPSID, System.DateTime dtDate)
        {
            this.UploadSPRConfirmAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSPRID, strSPSID, dtDate, null);
        }

        /// <remarks/>
        public void UploadSPRConfirmAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSPRID, string strSPSID, System.DateTime dtDate, object userState)
        {
            if ((this.UploadSPRConfirmOperationCompleted == null))
            {
                this.UploadSPRConfirmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadSPRConfirmOperationCompleted);
            }
            this.InvokeAsync("UploadSPRConfirm", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSPRID,
                        strSPSID,
                        dtDate}, this.UploadSPRConfirmOperationCompleted, userState);
        }

        private void OnUploadSPRConfirmOperationCompleted(object arg)
        {
            if ((this.UploadSPRConfirmCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadSPRConfirmCompleted(this, new UploadSPRConfirmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadSPRConfirm", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DownloadSPRConfirm(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSPRID, string strSPSID, System.DateTime dtDate)
        {
            object[] results = this.Invoke("DownloadSPRConfirm", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSPRID,
                        strSPSID,
                        dtDate});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void DownloadSPRConfirmAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSPRID, string strSPSID, System.DateTime dtDate)
        {
            this.DownloadSPRConfirmAsync(commguid, strCompSerial, strCompAddress, strLicType, decMaxUsers, strMacs, strSPRID, strSPSID, dtDate, null);
        }

        /// <remarks/>
        public void DownloadSPRConfirmAsync(string commguid, string strCompSerial, string strCompAddress, string strLicType, decimal decMaxUsers, string strMacs, string strSPRID, string strSPSID, System.DateTime dtDate, object userState)
        {
            if ((this.DownloadSPRConfirmOperationCompleted == null))
            {
                this.DownloadSPRConfirmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadSPRConfirmOperationCompleted);
            }
            this.InvokeAsync("DownloadSPRConfirm", new object[] {
                        commguid,
                        strCompSerial,
                        strCompAddress,
                        strLicType,
                        decMaxUsers,
                        strMacs,
                        strSPRID,
                        strSPSID,
                        dtDate}, this.DownloadSPRConfirmOperationCompleted, userState);
        }

        private void OnDownloadSPRConfirmOperationCompleted(object arg)
        {
            if ((this.DownloadSPRConfirmCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadSPRConfirmCompleted(this, new DownloadSPRConfirmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TestFileList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TestFileList()
        {
            object[] results = this.Invoke("TestFileList", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void TestFileListAsync()
        {
            this.TestFileListAsync(null);
        }

        /// <remarks/>
        public void TestFileListAsync(object userState)
        {
            if ((this.TestFileListOperationCompleted == null))
            {
                this.TestFileListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestFileListOperationCompleted);
            }
            this.InvokeAsync("TestFileList", new object[0], this.TestFileListOperationCompleted, userState);
        }

        private void OnTestFileListOperationCompleted(object arg)
        {
            if ((this.TestFileListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestFileListCompleted(this, new TestFileListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                        || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void LoadSupportNewstickersCompletedEventHandler(object sender, LoadSupportNewstickersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadSupportNewstickersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadSupportNewstickersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void SupportRequestsAreOpenCompletedEventHandler(object sender, SupportRequestsAreOpenCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SupportRequestsAreOpenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SupportRequestsAreOpenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void LoadSupportRequestFileCompletedEventHandler(object sender, LoadSupportRequestFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadSupportRequestFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadSupportRequestFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void AddFileCompletedEventHandler(object sender, AddFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void SaveSupportRequestCompletedEventHandler(object sender, SaveSupportRequestCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveSupportRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SaveSupportRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void LoadSupportRequestCompletedEventHandler(object sender, LoadSupportRequestCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadSupportRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadSupportRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void LoadMyFAQsCompletedEventHandler(object sender, LoadMyFAQsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadMyFAQsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadMyFAQsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void LoadFAQCompletedEventHandler(object sender, LoadFAQCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadFAQCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadFAQCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void SaveFAQCompletedEventHandler(object sender, SaveFAQCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFAQCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SaveFAQCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void LoadMySupportRequestsCompletedEventHandler(object sender, LoadMySupportRequestsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadMySupportRequestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadMySupportRequestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void LoadCoreTeamSupportRequestsCompletedEventHandler(object sender, LoadCoreTeamSupportRequestsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadCoreTeamSupportRequestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadCoreTeamSupportRequestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void LoadControllingSupportRequestsCompletedEventHandler(object sender, LoadControllingSupportRequestsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadControllingSupportRequestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadControllingSupportRequestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetVersionofAppServerCompletedEventHandler(object sender, GetVersionofAppServerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionofAppServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVersionofAppServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void LoadAvailableDownloadsCompletedEventHandler(object sender, LoadAvailableDownloadsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadAvailableDownloadsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadAvailableDownloadsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetVersionofDeviceHunterCompletedEventHandler(object sender, GetVersionofDeviceHunterCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionofDeviceHunterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVersionofDeviceHunterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetVersionofERPImportCompletedEventHandler(object sender, GetVersionofERPImportCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionofERPImportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVersionofERPImportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetVersionofFileContentImportCompletedEventHandler(object sender, GetVersionofFileContentImportCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionofFileContentImportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVersionofFileContentImportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetVersionofFileImportCompletedEventHandler(object sender, GetVersionofFileImportCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionofFileImportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVersionofFileImportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetVersionofFullindexingCompletedEventHandler(object sender, GetVersionofFullindexingCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionofFullindexingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVersionofFullindexingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetVersionofScanningCompletedEventHandler(object sender, GetVersionofScanningCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionofScanningCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVersionofScanningCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetVersionofMessageCompletedEventHandler(object sender, GetVersionofMessageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionofMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVersionofMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetVersionofTRanslatorCompletedEventHandler(object sender, GetVersionofTRanslatorCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionofTRanslatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVersionofTRanslatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetVersionofLDAPConnectorCompletedEventHandler(object sender, GetVersionofLDAPConnectorCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionofLDAPConnectorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVersionofLDAPConnectorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetVersionofUpdaterCompletedEventHandler(object sender, GetVersionofUpdaterCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionofUpdaterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVersionofUpdaterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetVersionofClientCompletedEventHandler(object sender, GetVersionofClientCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionofClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVersionofClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void LoadTestFileCompletedEventHandler(object sender, LoadTestFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadTestFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadTestFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void LoadFileListCompletedEventHandler(object sender, LoadFileListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadFileListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadFileListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void LoadFileCompletedEventHandler(object sender, LoadFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void LoadCompressedFileCompletedEventHandler(object sender, LoadCompressedFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadCompressedFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadCompressedFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetGlobalTranslationsCompletedEventHandler(object sender, GetGlobalTranslationsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGlobalTranslationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetGlobalTranslationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void DownloadSPRFileCompletedEventHandler(object sender, DownloadSPRFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadSPRFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DownloadSPRFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void DownloadSPRDocCompletedEventHandler(object sender, DownloadSPRDocCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadSPRDocCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DownloadSPRDocCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void DownloadChangedSPRsCompletedEventHandler(object sender, DownloadChangedSPRsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadChangedSPRsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DownloadChangedSPRsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void UploadSPRDocCompletedEventHandler(object sender, UploadSPRDocCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadSPRDocCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UploadSPRDocCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void UploadSPRFileCompletedEventHandler(object sender, UploadSPRFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadSPRFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UploadSPRFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void UploadSPRConfirmCompletedEventHandler(object sender, UploadSPRConfirmCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadSPRConfirmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UploadSPRConfirmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void DownloadSPRConfirmCompletedEventHandler(object sender, DownloadSPRConfirmCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadSPRConfirmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DownloadSPRConfirmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void TestFileListCompletedEventHandler(object sender, TestFileListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestFileListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TestFileListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591